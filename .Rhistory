usethis::use_r("constrained_model")
usethis::use_r("presence_absence")
usethis::use_r("format_data")
help(dcast)
load('data.RD')
taxonomy <- function(taxrow){
suppressWarnings(i <- min(which(is.na(taxrow)))-1)
if (is.infinite(i)){
i <- paste(taxrow[length(taxrow)-1], taxrow[length(taxrow)])
return(i)
} else {
return(taxrow[i])
}
}
tax <- tax$x$data
tax <- cbind(tag=tax[,1], tax[,-1], taxonomy=apply(tax, 1, taxonomy)) %>%
mutate(tag.name=paste0(taxonomy, " (", tag, ")"))
library(dplyr)
taxonomy <- function(taxrow){
suppressWarnings(i <- min(which(is.na(taxrow)))-1)
if (is.infinite(i)){
i <- paste(taxrow[length(taxrow)-1], taxrow[length(taxrow)])
return(i)
} else {
return(taxrow[i])
}
}
tax <- tax$x$data
tax <- cbind(tag=tax[,1], tax[,-1], taxonomy=apply(tax, 1, taxonomy)) %>%
mutate(tag.name=paste0(taxonomy, " (", tag, ")"))
load('data.RD')
taxonomy <- function(taxrow){
suppressWarnings(i <- min(which(is.na(taxrow)))-1)
if (is.infinite(i)){
i <- paste(taxrow[length(taxrow)-1], taxrow[length(taxrow)])
return(i)
} else {
return(taxrow[i])
}
}
tax <- tax$x$data
tax <- cbind(tag=tax[,1], tax[,-1], taxonomy=apply(tax, 1, taxonomy)) %>%
mutate(tag.name=paste0(taxonomy, " (", tag, ")"))
# change community table to presence-absence
comm[comm>0] <- 1
# make sure community matrix order matches taxonomy and metadata
comm <- comm[row.names(meta),]
comm <- comm[,row.names(tax)]
# remove species for which they are absent more than the threshold in param `zeroes`
pull <- apply(comm, 2, function(x){length(x[which(x==0)])})
zeroes=50
comm <- comm[,-which(pull>zeroes)]
zeroes=30
load('data.RD')
taxonomy <- function(taxrow){
suppressWarnings(i <- min(which(is.na(taxrow)))-1)
if (is.infinite(i)){
i <- paste(taxrow[length(taxrow)-1], taxrow[length(taxrow)])
return(i)
} else {
return(taxrow[i])
}
}
tax <- tax$x$data
tax <- cbind(tag=tax[,1], tax[,-1], taxonomy=apply(tax, 1, taxonomy)) %>%
mutate(tag.name=paste0(taxonomy, " (", tag, ")"))
# change community table to presence-absence
comm[comm>0] <- 1
# make sure community matrix order matches taxonomy and metadata
comm <- comm[row.names(meta),]
comm <- comm[,row.names(tax)]
# remove species for which they are absent more than the threshold in param `zeroes`
pull <- apply(comm, 2, function(x){length(x[which(x==0)])})
comm <- comm[,-which(pull>zeroes)]
load('data.RD')
taxonomy <- function(taxrow){
suppressWarnings(i <- min(which(is.na(taxrow)))-1)
if (is.infinite(i)){
i <- paste(taxrow[length(taxrow)-1], taxrow[length(taxrow)])
return(i)
} else {
return(taxrow[i])
}
}
tax <- tax$x$data
tax <- cbind(tag=tax[,1], tax[,-1], taxonomy=apply(tax, 1, taxonomy)) %>%
mutate(tag.name=paste0(taxonomy, " (", tag, ")"))
zeroes=60
# change community table to presence-absence
comm[comm>0] <- 1
# make sure community matrix order matches taxonomy and metadata
comm <- comm[row.names(meta),]
comm <- comm[,row.names(tax)]
# remove species for which they are absent more than the threshold in param `zeroes`
pull <- apply(comm, 2, function(x){length(x[which(x==0)])})
comm <- comm[,-which(pull>zeroes)]
# reduce taxonomy to match reduced community table
tax <- tax[colnames(comm),]
View(tax)
# create a new data frame with the reduced information
taxa <- t(comm) %>% as.data.frame() %>%
tibble::rownames_to_column(var="tag") %>%
left_join(tax[,c("tag","taxonomy","tag.name")]) %>%
as.data.frame() %>% `row.names<-`(.$tag.name) %>%
.[,-c(1,(ncol(.)-2):ncol(.))] %>% t()
View(taxa)
# make sure SampleID is specified in the metadata
meta <- data.frame(SampleID=row.names(meta), meta)
i <- colnames(taxa)[1]
tax.comm <- data.frame(SampleID=row.names(taxa), Taxon=taxa[,i]) %>%
left_join(meta) %>% droplevels(.)
View(tax.comm)
help(vars)
stat <- "Date"
vars(stat)
contains(stat)
select(meta, contains(stat))
if (any(is.na(tax.comm))){tax.comm[is.na(tax.comm)] <- 0}
states=
help(paste)
library(MBOcc)
library(MBOcc)
usethis::use_r(
"run_models"
)
usethis::use_r(
"groupColors"
)
library(MBOcc)
S=1
SS=2^S               #  number of possible states, given sub-levels, including 0000
SSm1=SS-1            #  number of possible states, given sub-levels excluding 0000
#creating combination of truestates
trustate=NULL
for (i in 0:SSm1) trustate=rbind(trustate,as.integer(intToBits(i)[S:1]))
states=CINT=apply(trustate,1,paste,collapse='') #CINT represent Cecum, Ileum, Nasal, Trachea
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
library(MBOcc)
usethis::use_r("unroll_data")
library(MBOcc)
library(MBOcc)
