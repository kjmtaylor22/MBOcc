meta$Rearing[grep("-85", meta$Experiment)] <- "Commercial"
meta$Rearing[-grep("-85", meta$Experiment)] <- "Research"
meta <- subset(meta, subset=BodySite%in%c("CECUM","ILEUM","NASAL","TRACHEA")&Species!="Control")
nas.expand <- meta[grep("-", meta$Bird_ID),]
nas.expand$Bird_ID <- gsub("--", "-", nas.expand$Bird_ID)
nas.expand <- tidyr::separate(nas.expand, "Bird_ID", c("from","to"),"-", convert=T)
out.expand <- data.frame()
for (j in 1:nrow(nas.expand)){
k <- c(nas.expand$from[j]:nas.expand$to[j])
out1 <- data.frame()
for (l in 1:length(k)){out1 <- rbind(out1, nas.expand[j,])}
out1$from <- k
out1 <- out1[,-which(names(out1)=="to")]
out.expand <- rbind(out.expand, out1)
}
names(out.expand)[names(out.expand)=="from"] <- "Bird_ID"
comm.expand <- data.frame()
for (i in out.expand$SampleID){
comm.expand <- rbind(comm.expand, comm[i,])
}
comm <- comm[-match(nas.expand$SampleID, row.names(comm)),]
comm <- rbind(comm, comm.expand)
out.expand$SampleID <- row.names(comm.expand)
row.names(out.expand) <- out.expand$SampleID
meta <- meta[-grep("-", meta$Bird_ID),]
meta <- rbind(meta, out.expand)
metaR <- subset(meta, subset=Flock=="R")
metaR <- subset(metaR, subset=Age!="01W")
metaRN <- subset(metaR, subset=Bird_ID%in%c(41:50))
metaRN$Flock <- "RN"
metaRS <- subset(metaR, subset=Bird_ID%in%c(51:60))
metaRS$Flock <- "RS"
meta <- subset(meta, subset=Flock!="R")
meta <- rbind(meta, metaRN, metaRS)
row.names(meta) <- meta$SampleID
row.names(tax) <- tax$tag
comm <- comm[row.names(meta),]
## Select some taxa for downstream analysis
commpath <- comm[,which(tax$genus%in%c("Avibacterium","Ornithobacterium","Staphylococcus","Streptococcus","Enterococcus","Escherichia-Shigella","Mycoplasma","Gallibacterium","Haemophilus","Deinococcus","faecalibacterium","Parasutterella","Fusobacterium"))] %>%
SummarizeCommTax(tax = tax, level = "genus")
commlac <- comm[,which(tax$genus=="Lactobacillus")] %>%
SummarizeCommTax(tax = tax, level = NULL) %>%
.[,-1]
commclos <- comm[,which(tax$genus=="Clostridium")] %>%
SummarizeCommTax(tax = tax, level = NULL) %>%
mutate(`Clostridium (other)`=Clostridium+`Clostridium Clostridium`) %>% .[,-c(1,3)]
commCand <- comm[,which(tax$genus=="Candidatus")] %>%
SummarizeCommTax(tax = tax, level = NULL)
## Compile taxon tables into single table
commset <- cbind(commlac, commclos, commCand, commpath)
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Age, commset+1,
row.names=row.names(commset))
View(commsetF)
commsetF <- data.frame(X1=meta$Flock, X2=meta$BodySite, X3=meta$Age, commset+1,
row.names=row.names(commset))
commsetF <- data.frame(X1=meta$Flock, X2=meta$BodySite, X3=meta$Age, commset,
row.names=row.names(commset))
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean)
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean)
help(everything)
help(across)
metaF <- commsetF[,1:4]
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
`row.names<-`(paste(X3, X4, sep="_"))
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
`row.names<-`(paste(.$X3, .$X4, sep="_"))
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean)
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
metaF <- commsetF[,1:4] %>%
mutate(id=paste(X3, X4, sep="_"))
View(metaF)
commsetF <- commsetf[,-c(1:4)] %>%
mutate(across(everything(), ~ f.o(.x, id=metaF$id, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
commsetF <- commsetF[,-c(1:4)] %>%
mutate(across(everything(), ~ f.o(.x, id=metaF$id, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
commsetF <- commsetF[,-c(1:4)]
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
commsetF <- commsetF[,-c(1:4)] %>%
mutate(across(everything(), ~ f.o(.x, id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
metaF <- commsetF[,1:4]
commsetF <- commsetF[,-c(1:4)] %>%
mutate(across(everything(), ~ f.o(.x, id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
library(MBOcc)
## Load the data
load("../data/basefiles_26-03-24.RD")
## Load necessary packages
library(dplyr)
library(ggplot2)
library(kableExtra)
## Do some data cleanup
meta$Flock <- factor(meta$Flock, labels=c("","F1","F1","F2","F2","R","RN","RS","SPF-C","SPF-T","UMN"))
meta <- subset(meta, subset=Experiment!="TK-107")
meta <- mutate(meta, Rearing=NA)
meta$Rearing[grep("-85", meta$Experiment)] <- "Commercial"
meta$Rearing[-grep("-85", meta$Experiment)] <- "Research"
meta <- subset(meta, subset=BodySite%in%c("CECUM","ILEUM","NASAL","TRACHEA")&Species!="Control")
nas.expand <- meta[grep("-", meta$Bird_ID),]
nas.expand$Bird_ID <- gsub("--", "-", nas.expand$Bird_ID)
nas.expand <- tidyr::separate(nas.expand, "Bird_ID", c("from","to"),"-", convert=T)
out.expand <- data.frame()
for (j in 1:nrow(nas.expand)){
k <- c(nas.expand$from[j]:nas.expand$to[j])
out1 <- data.frame()
for (l in 1:length(k)){out1 <- rbind(out1, nas.expand[j,])}
out1$from <- k
out1 <- out1[,-which(names(out1)=="to")]
out.expand <- rbind(out.expand, out1)
}
names(out.expand)[names(out.expand)=="from"] <- "Bird_ID"
comm.expand <- data.frame()
for (i in out.expand$SampleID){
comm.expand <- rbind(comm.expand, comm[i,])
}
comm <- comm[-match(nas.expand$SampleID, row.names(comm)),]
comm <- rbind(comm, comm.expand)
out.expand$SampleID <- row.names(comm.expand)
row.names(out.expand) <- out.expand$SampleID
meta <- meta[-grep("-", meta$Bird_ID),]
meta <- rbind(meta, out.expand)
metaR <- subset(meta, subset=Flock=="R")
metaR <- subset(metaR, subset=Age!="01W")
metaRN <- subset(metaR, subset=Bird_ID%in%c(41:50))
metaRN$Flock <- "RN"
metaRS <- subset(metaR, subset=Bird_ID%in%c(51:60))
metaRS$Flock <- "RS"
meta <- subset(meta, subset=Flock!="R")
meta <- rbind(meta, metaRN, metaRS)
row.names(meta) <- meta$SampleID
row.names(tax) <- tax$tag
comm <- comm[row.names(meta),]
## Select some taxa for downstream analysis
commpath <- comm[,which(tax$genus%in%c("Avibacterium","Ornithobacterium","Staphylococcus","Streptococcus","Enterococcus","Escherichia-Shigella","Mycoplasma","Gallibacterium","Haemophilus","Deinococcus","faecalibacterium","Parasutterella","Fusobacterium"))] %>%
SummarizeCommTax(tax = tax, level = "genus")
commlac <- comm[,which(tax$genus=="Lactobacillus")] %>%
SummarizeCommTax(tax = tax, level = NULL) %>%
.[,-1]
commclos <- comm[,which(tax$genus=="Clostridium")] %>%
SummarizeCommTax(tax = tax, level = NULL) %>%
mutate(`Clostridium (other)`=Clostridium+`Clostridium Clostridium`) %>% .[,-c(1,3)]
commCand <- comm[,which(tax$genus=="Candidatus")] %>%
SummarizeCommTax(tax = tax, level = NULL)
## Compile taxon tables into single table
commset <- cbind(commlac, commclos, commCand, commpath)
## Create new binary matrix from count matrix
commsetF <- data.frame(X1=meta$Experiment, X2=meta$BodySite, X3=meta$Flock, X4=meta$Age_weeks, commset,
row.names=row.names(commset)) %>% #combine count data with random effect (grouping) vectors
group_by(X1, X2, X3, X4) %>%
summarize_all(.funs=mean) %>%
as.data.frame() %>%
`row.names<-`(paste(.$X2, .$X3, .$X4, sep="_"))
metaF <- commsetF[,1:4]
commsetN <- commsetF[,-c(1:4)] %>%
reframe(across(everything(), ~ f.o(.x, id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
View(commsetN)
View(commsetF)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
reframe(across(everything(), ~ f.o(.x, id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
reframe(across(everything(), ~ f.o(.x, id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)))) #sweep function across all columns without changing row order
View(commsetN)
help(melt)
View(commsetN)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
head(df)
View(df)
View(out)
df <- left_join(out, df, by=c("timevar"="timevar","sitevar"="sitevar","L1"="id"))
View(out)
View(df)
View(out)
View(out)
df <- left_join(out, df, by=c("timevar"="timevar","variable"="sitevar","L1"="id"))
out <- df[,c(4, ncol(df))]
View(out)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(commsetN)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
df <- left_join(out, df, by=c("timevar"="timevar","variable"="sitevar","L1"="id"))
View(df)
cast <- acast(df, timevar ~ sitevar ~ id, value.var="x")
df <- data.frame(id=id, sitevar=sitevar, timevar=timevar, x=x, row.names=sampleID)
df$id <- as.character(df$id)
df <- df[order(df$id, df$sitevar, df$timevar),]
cast <- acast(df, timevar ~ sitevar ~ id, value.var="x")
cast <- apply(cast, 3, identity, simplify = FALSE)
cast <- lapply(cast, na.omit)
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
suppressWarnings(melt(variable.name="sitevar", id.vars="timevar"))
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
suppressMessages(melt(variable.name="sitevar", id.vars="timevar"))
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
suppressWarnings(melt(variable.name="sitevar", id.vars="timevar"))
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
suppressMessages({
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
melt(variable.name="sitevar", id.vars="timevar")
})
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
suppressWarnings({
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
melt(variable.name="sitevar", id.vars="timevar")
})
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
View(out)
cast <- acast(df, timevar ~ sitevar ~ id, value.var="x")
cast <- apply(cast, 3, identity, simplify = FALSE)
cast <- lapply(cast, na.omit)
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
suppressWarnings({
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
melt(variable.name="sitevar", id.vars="timevar")
})
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
View(out)
View(cast)
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
suppressWarnings(
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
melt(variable.name="sitevar", id.vars="timevar")
)
return(remelt)
}
out <- lapply(cast, to.fo) %>% melt()
to.fo <- function(x){
binary <- matrix(0,nrow=nrow(x)-1, ncol=ncol(x))
for (t in 2:nrow(x)){
binary[t-1,] <- x[t,]-x[t-1,]
}
binary[binary<0] <- 0
binary[binary>0] <- 1
remelt <- as.data.frame(binary) %>%
`colnames<-`(colnames(x)) %>%
data.frame(timevar=row.names(x)[-1]) %>%
melt(variable.name="sitevar", id.vars="timevar")
return(remelt)
}
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(out)
View(df)
View(df)
out <- lapply(cast, to.fo) %>% melt()
out$L1 <- as.character(out$L1)
View(out)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(commsetN)
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(df)
out <- df[,c(6, ncol(df))]
return(out)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(commsetN)
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(comm)
suppressMessages(
out <- reshape2::melt(comm) %>%
reshape2::dcast(SampleID ~ L1) %>%
column_to_rownames("SampleID")
)
View(out)
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
x
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
out <- lapply(cast, to.fo) %>% melt()
View(out)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(commsetN)
detach("package:MBOcc", unload = TRUE)
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
out <- lapply(cast, to.fo) %>% melt()
z
out$value
out$L1 <- as.character(out$L1)
df$timevar <- as.character(df$timevar)
df$SampleID <- row.names(df)
df <- left_join(out, df, by=c("timevar"="timevar","sitevar"="sitevar","L1"="id"))
View(df)
df$value
library(MBOcc)
commsetN <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
View(commsetN)
View(metaF)
commsetF <- commsetF[,-c(1:4)] %>%
f.o(., id=metaF$X3, sitevar=metaF$X2, timevar=metaF$X4, sampleID=row.names(.)) #sweep function across all columns without changing row order
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=meta, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.75, states="BodySite")
View(commsetF)
View(metaF)
metaF <- metaF[row.names(commsetF),]
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=meta, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.75, states="BodySite")
head(metaF)
## Metadata column containing individual IDs
ids <- c("X3")
## Metadata columns containing fixed effects of interest
groups <- c("X4","X1")
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=meta, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.75, states="BodySite")
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=meta, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.75, states="X2")
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.75, states="X2")
identical(row.names(metaF), row.names(commsetF))
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
View(metaF)
View(commsetF)
rm(meta)
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
rm(comm)
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
any(!row.names(commsetF)%in%row.names(metaF))
View(commsetF)
names(commsetF) <- gsub("."," ",names(commsetF),fixed = T)
names(commsetF) <- gsub("other","(other)",names(commsetF),fixed = T)
## Convert to MBOcc list format
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
tmp <- lapply(commsetF, MBformat, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
## Convert to MBOcc list format
tmp <- MBformat(commsetF,meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
## Convert to MBOcc list format
formatF <- MBformat(commsetF,meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.99, states="X2")
View(formatF)
## Convert to MBOcc list format
formatF <- MBformat(commsetF, meta=metaF, tax=NULL, id.vars=ids,
group.vars=groups, zeroes=0.9, states="X2")
View(formatF)
